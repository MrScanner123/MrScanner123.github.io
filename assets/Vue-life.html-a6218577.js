import{_ as e,o as t,c as r,f as o}from"./app-f6785d32.js";const n="/vue_lifeImg/life01.png",a={},i=o('<h3 id="vue生命周期" tabindex="-1"><a class="header-anchor" href="#vue生命周期" aria-hidden="true">#</a> Vue生命周期</h3><p><img src="'+n+'" alt="img"></p><ul><li><strong>beforeCreated</strong>：在实例初始化之后，数据观测和event/watcher事件配置之前被调用。</li><li><strong>created</strong>：实例已经创建完成之后被调用，在这一步，实例已完成以下的配置：数据观测（data observe）属性和方法的运算，watch/event事件回调。然而，挂在阶段还没开始，$el属性目前不可见。</li><li><strong>beforeMount</strong>：在挂载之前被调用：相关的render函数首次被调用</li><li><strong>mounted</strong>：el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.$el也在文档内。</li><li><strong>beforeUpdate</strong>：数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前，你可以在这个钩子中进一步更改状态，这不会触发附加的重渲染过程。</li><li><strong>updated</strong>：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。</li></ul><h2 id="组件间通信" tabindex="-1"><a class="header-anchor" href="#组件间通信" aria-hidden="true">#</a> 组件间通信</h2>',4),s=[i];function l(c,d){return t(),r("div",null,s)}const u=e(a,[["render",l],["__file","Vue-life.html.vue"]]);export{u as default};
