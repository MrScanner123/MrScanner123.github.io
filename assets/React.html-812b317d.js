import{_ as a,o as n,c as s,f as t}from"./app-28f5d3d5.js";const e={},p=t(`<h2 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h2><ul><li>React概述</li><li>React的基本使用</li><li>React的脚手架使用</li></ul><h3 id="react概述" tabindex="-1"><a class="header-anchor" href="#react概述" aria-hidden="true">#</a> React概述</h3><ol><li>什么是React？</li></ol><p>React是一个用于<strong>构建用户界面</strong>的<strong>JavaScript库</strong></p><p>React主要用来写HTML页面，或<strong>构建Web应用</strong></p><p>2、React的特点</p><ul><li>声明式</li><li>基于组件</li><li>学习一次，随处使用</li></ul><ol><li><p>*<em>声明式</em></p><p>你只需要描述UI（HTML）看起来是什么样，就跟写HTML一样。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello React<span class="token operator">!</span> 动态变化数据：<span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基于组件</p><ul><li>组件是React<strong>最重要</strong>的内容</li><li>组件表示页面中的部分内容</li><li>组合、复用多个组件，可以实现完整的页面功能</li></ul></li><li><p>学习一次，随处使用</p><ul><li>使用React可以开发Web应用</li><li>使用React可以开发移动端原生应用（react-native）</li><li>使用React可以开发VR应用</li></ul></li></ol><h3 id="react的基本使用" tabindex="-1"><a class="header-anchor" href="#react的基本使用" aria-hidden="true">#</a> React的基本使用</h3><ol><li><p>React的安装</p><ul><li>react包是核心</li></ul></li><li><p>React的使用</p><ol><li>引入react和react-dom两个js文件</li><li>创建react元素</li><li>渲染react元素到页面中</li></ol></li><li><p>方法说明</p><ul><li><p>React.createElement()</p></li><li><p>ReactDOM.render()</p><ul><li>第一个参数：要渲染的react元素</li><li>第二个参数：DOM对象，用于指定渲染到页面中的位置。</li></ul><p>ReactDOM.render(el, document.getElementById(&#39;root&#39;))</p></li></ul></li></ol><h3 id="react脚手架" tabindex="-1"><a class="header-anchor" href="#react脚手架" aria-hidden="true">#</a> React脚手架</h3><ol><li>脚手架是开发现代Web应用的必备</li><li>充分利用Webpack、Babel、ESLint等工具辅助项目开发</li><li>零配置，无需手动配置繁琐的工具既可使用</li><li>关注业务，而不是工具配置。</li></ol><h4 id="react脚手架初始化项目" tabindex="-1"><a class="header-anchor" href="#react脚手架初始化项目" aria-hidden="true">#</a> react脚手架初始化项目</h4><ol><li>初始化项目，命令：npx create-react-app my-app</li><li>启动项目，在项目根目录执行命令：npm start</li></ol><ul><li><p>npx命令介绍</p><ul><li>npm v5.2.0引入的一条命令</li><li>目的：提升包内提供的命令行工具的使用体验</li><li>原来：先安装脚手架包，再使用这个包中提供的命令</li><li>现在：<strong>无需安装脚手架包</strong>，就可以直接使用这个包提供的命令</li></ul><p><strong>补充说明</strong></p><p>1、推荐使用 npx create-react-app 项目名</p><p>2、npm init react-app 项目名</p><p>3、yarn create react-app 项目名</p></li></ul><h3 id="在脚手架中使用react" tabindex="-1"><a class="header-anchor" href="#在脚手架中使用react" aria-hidden="true">#</a> 在脚手架中使用React</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用**React.createElement()**方法创建react元素</p><p>调用**ReactDOM.render()**方法渲染react元素到页面中</p><h3 id="react基础" tabindex="-1"><a class="header-anchor" href="#react基础" aria-hidden="true">#</a> React基础</h3><p>1、React是构建用户界面的JavaScript库</p><p>2、使用react时，推荐使用脚手架方式</p><p>3、初始化项目命令：npx create-react-app 项目名</p><p>4、启动项目命令：yarn start（或npm start）</p><p>5、React.createElement()方法用于创建react元素</p><p>6、ReactDOM.render()方法负责渲染react元素到页面中。</p><h2 id="jsx的基本使用" tabindex="-1"><a class="header-anchor" href="#jsx的基本使用" aria-hidden="true">#</a> JSX的基本使用</h2><p>1、create Element()的问题</p><ul><li>繁琐不简洁</li><li>不直观</li><li>不优雅，用户体验不爽</li></ul><h3 id="jsx简介" tabindex="-1"><a class="header-anchor" href="#jsx简介" aria-hidden="true">#</a> JSX简介</h3><p>JSX是JavaScript XML的简写，表示在JavaScript代码中写XML（HTML）格式的代码。</p><p>优势：申明式语法更加直观、与HTML结构相同，降低了学习成本、提高了效率。</p><ul><li>使用步骤：使用JSX语法，创建react 元素</li></ul><p>const title = <h1>hello jsx</h1></p><ul><li>ReactDOM.render(title,root)</li></ul><p>渲染创建好的React元素</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结：</h2><p>1、推荐使用JSX语法创建React元素</p><p>2、写JSX就跟写HTML一样，更加直观、友好</p><p>3、JSX语法更能体现React的声明式特点（描述UI长什么样子）</p><p>4、使用步骤：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1、使用jsx创建react元素</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello jsx<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token comment">//2、渲染react元素</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>root<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsx的注意点" tabindex="-1"><a class="header-anchor" href="#jsx的注意点" aria-hidden="true">#</a> JSX的注意点</h2><ol><li>React元素的属性名使用驼峰命名法</li><li>特殊属性名：class——&gt;className、for——&gt;htmlFor、tabindex——&gt;tabIndex</li><li>没有子节点的React元素可以用/&gt;结束</li><li>推荐：使用小括号包裹JSX，从而避免JS中的自动插入分号陷阱。</li></ol><h3 id="jsx的条件渲染" tabindex="-1"><a class="header-anchor" href="#jsx的条件渲染" aria-hidden="true">#</a> JSX的条件渲染</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1、导入react</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//2、创建react元素</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;hello react 1!!&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//3、渲染react元素</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/****************************************************************** */</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>

<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello jsx <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token number">1111</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token doc-comment comment">/****************************************************************** */</span>
<span class="token doc-comment comment">/**********条件渲染**********/</span>
<span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>数据加载完成，此处显示加载后的数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/***三元运算符 */</span>
<span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> isLoading <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>数据加载完成，此处显示加载后的数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/*****逻辑与运算 */</span>
<span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> isLoading <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>
   <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>
       条件渲染：
       <span class="token punctuation">{</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h2><ul><li>如果要渲染一组数据，应该使用数据的map()方法。</li><li>注意：渲染列表时应该添加key属性，<strong>key属性的值要保证唯一</strong></li><li>原则：map()遍历谁，就给谁添加key属性</li><li>注意：<strong>尽量避免使用索引号作为key</strong></li></ul><h2 id="jsx总结" tabindex="-1"><a class="header-anchor" href="#jsx总结" aria-hidden="true">#</a> JSX总结</h2><ul><li>JSX是React的核心内容</li><li>JSX表示在JS代码中写HTML结构，是React声明式的体现</li><li>使用JSX配合嵌入的JS表达式、条件渲染、列表渲染，可以描述任意UI结构。</li><li>推荐使用className的方式给JSX添加样式</li><li>React完全利用JS语言自身的能力来编写UI，而不是造轮子增强HTML功能。</li></ul><h2 id="react的组件基础" tabindex="-1"><a class="header-anchor" href="#react的组件基础" aria-hidden="true">#</a> React的组件基础</h2><ul><li>React组件介绍</li><li>React组件的两种创建方式</li><li>React事件处理</li><li>有状态和无状态组件</li><li>组件中的state和setState（）</li><li>事件绑定this指向</li><li>表单处理</li></ul><h2 id="react组件介绍" tabindex="-1"><a class="header-anchor" href="#react组件介绍" aria-hidden="true">#</a> React组件介绍</h2><ul><li>组件是React的<strong>一等公民</strong>，使用React就是在用组件</li><li>组件表示页面中的部分功能</li><li>组合多个组件实现完整的页面功能</li><li>特点：可复用、独立、可组合</li></ul><h3 id="使用函数创建组件" tabindex="-1"><a class="header-anchor" href="#使用函数创建组件" aria-hidden="true">#</a> 使用函数创建组件</h3><ul><li>函数组件：使用JS的函数（或者箭头函数）创建的函数</li><li>约定1：函数名称必须以<strong>大写字母开头</strong></li><li>约定2：函数组件<strong>必须有返回值</strong>，表示该组件的结构</li><li>如果返回值为null</li><li>渲染函数组件：<strong>用函数名作为组件标签名</strong></li><li>组件标签可以是单标签也可以是双标签</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>这是我的第一个函数组件！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//渲染组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用类创建的组件" tabindex="-1"><a class="header-anchor" href="#使用类创建的组件" aria-hidden="true">#</a> 使用类创建的组件</h2><ul><li>类组件：使用ES6的class创建的组件</li><li>约定1：类名称也必须以<strong>大写字母开头</strong></li><li>约定2：类组件应该继承React.Component父类，从而可以使用父类提供的方法或属性</li><li>约定3：类组件必须提供**render()**方法</li><li>约定4：render()方法<strong>必须有返回值</strong>，表示该组件的结构。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/******类组件 */</span>
<span class="token comment">//创建类组件</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>这是我的第一个函数组<span class="token number">2</span>件！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//渲染组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽离为独立js文件" tabindex="-1"><a class="header-anchor" href="#抽离为独立js文件" aria-hidden="true">#</a> 抽离为独立JS文件</h3><ol><li>创建hello.js</li><li>在Hello.js中导入React</li><li>创建组件（函数或者类）</li><li>在Hello.js中导出该组件</li><li>在index.js中导入Hello组件</li><li>渲染组件</li></ol><h3 id="react事件处理" tabindex="-1"><a class="header-anchor" href="#react事件处理" aria-hidden="true">#</a> React事件处理</h3><ol><li>事件绑定 <ul><li>React事件绑定语法与DOM事件语法相似</li><li>语法：on+事件名称={事件处理程序}，比如：onClick={（）=&gt;{}}</li></ul></li><li>事件对象</li></ol>`,65),o=[p];function l(c,i){return n(),s("div",null,o)}const d=a(e,[["render",l],["__file","React.html.vue"]]);export{d as default};
