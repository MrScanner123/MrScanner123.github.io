import{_ as n,o as s,c as a,f as p}from"./app-52e64b93.js";const t={},e=p(`<h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><ol><li><p>TypeScript(简称：TS)是JavaScript的<strong>超集</strong>（JS有的TS都有）</p><p>TypeScript = <strong>Type</strong> + JavaScript（在JS基础上，为JS添加了类型支持</p><p>TypeScirpt是微软开发的开源编程语言，可以在任何运行JavaScript的地方运行。</p></li><li><p>TypeScript为什么要为JS添加类型支持？</p><p>背景：JS的类型存在“先天缺陷”，JS代码绝大部分错误都是<strong>类型</strong>错误（Uncaught<strong>Type</strong>Error）</p><p>问题：增加了找Bug、改Bug的时间，严重影响开发效率。</p><p>配合VsCode等开发工具，TS可以<strong>提前到编写代码的同时</strong>，就发现代码中的错误，<strong>减少找BUG、改BUG时间</strong></p></li><li><p>TypeScript相比JavaScript的优势</p><ol><li>更早（写代码的同时）发现错误，<strong>减少找Bug、改Bug时间</strong>，提升开发效率。</li><li>程序中任何位置的代码都有<strong>代码提示</strong>，随时随地的安全感，增强了开发体验。</li><li>强大的<strong>类型系统</strong>提升了代码的可维护性，使得<strong>重构代码更加容易</strong>。</li><li>支持<strong>最新的ES语法</strong></li><li>TS<strong>类型推断</strong>机制，<strong>不需要</strong>在代码中的<strong>每个地方都显示标注类型</strong>。让你在享受优势的同时，尽量降低了成本。</li></ol></li><li><p>TypeScript是JS的超集，TS 提供了JS 的所有功能，并且额外的增加了：类型系统。</p><ul><li>所有的JS代码都是TS代码</li><li>JS有类型（比如：number/string等）但是<strong>JS不会检查变量是否发生变化</strong>。而<strong>TS会检查</strong>。TypeScript类型系统的主要优势：可以<strong>显示标记出代码的意外行为</strong>，从而降低了发生错误的可能性。 <ol><li>类型注解</li><li>常用基础类型</li></ol></li></ul></li><li><p>可以将TS中的常用类型细分为两类：1、JS已有类型2、TS新增类型。</p><ol><li>JS已有类型 <ul><li>原始类型:number/string/boolean/null/undefined/symbol</li><li>对象类型：object(数组、对象、函数等对象)</li></ul></li><li>TS新增类型 <ul><li>联合类型：自定义类型(类型别名)、接口、元组、字面量类型、枚举、void、any等</li></ul></li></ol></li><li><p>TypeScript常用类型</p><p>数组中既有number类型，又有string类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">(</span>numner<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>类型别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type CustomArray <span class="token operator">=</span> <span class="token punctuation">(</span>number<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释：</p><ol><li>使用<strong>type</strong>关键字来创建类型别名</li><li>类型别名（比如：此处的CustomArray）,可以任意合法的变量名称。</li><li>创建类型别名后，直接<strong>使用该类型别名作为变量的类型注解</strong>即可。</li></ol></li><li><p>函数类型</p><p>函数的类型实际上指的是：函数参数和返回值的类型</p><p>为函数指定类型的两种方式：1、单独指定参数、返回值的类型2、同时指定参数、返回值的类型。</p><p>1、单独指定参数、返回值的类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">num1</span><span class="token operator">:</span>number<span class="token punctuation">,</span><span class="token literal-property property">num2</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token operator">:</span>number <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//传入参数符合函数类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、同时指定参数、返回值的类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">num1</span><span class="token operator">:</span>number<span class="token punctuation">,</span><span class="token literal-property property">num2</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>只适用于函数表达式</strong></p><p>3、如果函数没有返回值，那么返回值应该用void</p><div class="language-javas line-numbers-mode" data-ext="javas"><pre class="language-javas"><code>function greet(name:string):void {
console.log(&#39;Hello&#39;,name)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到<strong>可选参数</strong>了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mySlice</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token operator">?</span><span class="token operator">:</span>number<span class="token punctuation">,</span>end<span class="token operator">?</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;起始索引:&#39;</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span><span class="token string">&#39;结束索引:&#39;</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选参数：在可传可不传的参数名称后面添加？（问号）</p><p>注意：<strong>可选参数只能出现在参数列表的最后</strong>，也就是说可选参数后面不能再出现必选参数。</p></li><li><p>对象类型</p><p>JS中的对象是由属性和方法构成的，而TS中对象的类型就是在描述对象的结构（有什么类型的属性和方法）。</p><p>对象类型的写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">;</span>age<span class="token operator">:</span>number<span class="token punctuation">;</span><span class="token function">sayHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>
    <span class="token function">sayHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><p>1、直接使用{}来描述对象结构。属性采用<strong>属性名:类型</strong>的形式；方法采用<strong>方法名（）：返回值类型</strong>的形式。</p><p>2、如果方法有参数，就在方法名后面的小括号中指定参数类型（比如：greet（name:string）:void）</p><p>3、在一行代码中指定对象的多个属性类型时，使用；（分号）来分隔。</p><ul><li>如果一行代码只指定一个属性类型（通过换行来分隔多个属性类型），可以去掉；</li><li>方法的类型也可以使用箭头函数形式（比如：{sayHi:() =&gt;void}）</li></ul></li><li><p>接口</p><p>如果对象类型被多次使用时，一般会使用接口（interface）来描述对象的类型，达到复用的目的。</p><p>解释：</p><p>1、使用<strong>interface</strong>关键字来声明接口</p><p>2、接口名称（比如：此处的IPerson），可以是任意合法的变量名称、</p><p>3、声明接口后，<strong>直接使用接口名称作为变量的类型</strong>。</p><p>4、因为每一行只有一个属性类型，因此，属性类型后没有；（分号）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span>string
    <span class="token literal-property property">age</span><span class="token operator">:</span>number
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token literal-property property">person</span><span class="token operator">:</span>IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>interface(接口)和type(类型别名)的对比：</p><ul><li>相同点：都可以给对象指定类型</li><li>不同点： <ul><li>接口：只能为对象指定类型。</li><li>类型别名：不仅可以为对象指定类型，实际上可以为任意类别指定别名</li></ul></li></ul></li><li><p>元组</p><p>元组类型是另一种类型的数组，它确切的知道包含多少个元素，以及特定索引对应的类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">position</span><span class="token operator">:</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span>number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">39.5427</span><span class="token punctuation">,</span><span class="token number">116.2317</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释：</p><p>1、元组类型可以确切的标记出有多少个元素，以及每个元素的类型。</p><p>2、该示例中，元素有两个元素，每个元素的类型都是number。</p></li></ol>`,2),o=[e];function l(r,i){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","TypeScript.html.vue"]]);export{u as default};
